p <- 0.047
n*p
# we can calculate the probability binomial to solve for $(P(X \geq 42)$
n <- 262
p <- 0.047
pbinom(41, size = n, prob = p, lower.tail = FALSE)
# again we can solve for the expected number of blaze rods by solving for np
n <- 305
p <- 0.5
n*p
# we can calculate the probability binomial to solve for $(P(X \geq 211)$
# again, using probability binom exceeding 211
pbinom(210, size = n, prob = p, lower.tail = FALSE)
num_same_name <- replicate(1e4, {
names <- 1:27
draws <- sample(names)
sum(names == draws) # did they draw their name ?
})
# expected value of num_same_name
mean(num_same_name)
pmf_num_same_name <- proportions(table(num_same_name))
plot(pmf_num_same_name, type = "h",
xlab = "Number of People",
ylab = "Probability",
main = "PMF of the Number of People Who Draw Their Own Name")
# poisson approximation
dpois(x = 0:8, lambda = 1) |> round(4) # poisson approximation rounded to 4 decimal places
plot(dpois(x = 0:8, lambda = 1), type = "h",
xlab = "Number of People",
ylab = "Probability",
main = "The Poisson Approximation of the Number of People Who Draw Their Own Name")
# pmf values from above
pmf_num_same_name
# poisson approximation from above
dpois(x = 0:8, lambda = 1) |> round(4)
# comparison as a plot
plot(pmf_num_same_name, type = "b", col = "salmon",
xlab = "Number of People Who Draw Their Own Name",
ylab = "Probability of Drawing Their Own Name",
main = "Simulation in Comparison to Poisson Approximation of Number of People Who Draw Their Own Name")
lines(x = 0:8, y = dpois(x = 0:8, lambda = 1),
type = "b", col = "black", lwd = 2)
legend("topright", legend = c("Simulation", "poisson approximation"),
col = c("salmon", "black"), lwd = 2, lty = 1, pch = 1)
# create vowels vector
vowels <- c("A", "E", "I", "O", "U")
# run simulation, check if the tiles pulled are in vowels vector using the %in% operator
num_vows <- replicate(1e4, {
tiles <- sample(scrabble$piece, size = 7, replace = FALSE)
sum(tiles %in% vowels) # %in% operator simply checks if tiles sample are in vowels
})
mean(num_vowels == 0) # probability of no vowels
knitr::opts_chunk$set(echo = TRUE)
# load R packages used here
library(fosdata)
1/4 + 1/2 + 1/8 + 1/8
1/8 + 1/8
((1/8) + (1/8)) / ((1/8) + (1/8) + (1/2))
1/8 + 1/8 + 1/2
# the mean of x is solved using the pmf and the x values
# the probs
probs <- c(1/4, 1/2, 1/8, 1/8)
# the x vals
x <- 0:3
# solve for mean
mean_x <- sum (x*probs)
mean_x
# variance of x is going to be the second moment - mean squared
second_moment_x <- sum((x^2)*probs)
# variance
var_x <- second_moment_x - mean_x^2
var_x
# the expected number of ender pearls is the mean of the binomial distribution, therefore np
n <- 262
p <- 0.047
n*p
# we can calculate the probability binomial to solve for $(P(X \geq 42)$
n <- 262
p <- 0.047
pbinom(41, size = n, prob = p, lower.tail = FALSE)
# again we can solve for the expected number of blaze rods by solving for np
n <- 305
p <- 0.5
n*p
# we can calculate the probability binomial to solve for $(P(X \geq 211)$
# again, using probability binom exceeding 211
pbinom(210, size = n, prob = p, lower.tail = FALSE)
num_same_name <- replicate(1e4, {
names <- 1:27
draws <- sample(names)
sum(names == draws) # did they draw their name ?
})
# expected value of num_same_name
mean(num_same_name)
pmf_num_same_name <- proportions(table(num_same_name))
plot(pmf_num_same_name, type = "h",
xlab = "Number of People",
ylab = "Probability",
main = "PMF of the Number of People Who Draw Their Own Name")
# poisson approximation
dpois(x = 0:8, lambda = 1) |> round(4) # poisson approximation rounded to 4 decimal places
plot(dpois(x = 0:8, lambda = 1), type = "h",
xlab = "Number of People",
ylab = "Probability",
main = "The Poisson Approximation of the Number of People Who Draw Their Own Name")
# pmf values from above
pmf_num_same_name
# poisson approximation from above
dpois(x = 0:8, lambda = 1) |> round(4)
# comparison as a plot
plot(pmf_num_same_name, type = "b", col = "salmon",
xlab = "Number of People Who Draw Their Own Name",
ylab = "Probability of Drawing Their Own Name",
main = "Simulation in Comparison to Poisson Approximation of Number of People Who Draw Their Own Name")
lines(x = 0:8, y = dpois(x = 0:8, lambda = 1),
type = "b", col = "black", lwd = 2)
legend("topright", legend = c("Simulation", "poisson approximation"),
col = c("salmon", "black"), lwd = 2, lty = 1, pch = 1)
# create vowels vector
vowels <- c("A", "E", "I", "O", "U")
# run simulation, check if the tiles pulled are in vowels vector using the %in% operator
num_vowels <- replicate(1e4, {
tiles <- sample(scrabble$piece, size = 7, replace = FALSE)
sum(tiles %in% vowels) # %in% operator simply checks if tiles sample are in vowels
})
mean(num_vowels == 0) # probability of no vowels
dhyper(x = 7, m = 42, n = 58, k = 7)
phyper(q = 2, m = 42, n = 58, k = 7)
k <- 7
n <- 58
m <- 42
k * m / (m + n)
# the formula for this is = $\sqrt(k * m / (m + n) * n / (m + n) * (m + n - k)/(m + n - 1))$
sqrt(k * m / (m + n) * n / (m + n) * (m + n - k)/(m + n - 1))
number_vowels <- replicate(1e4, {
tiles <- sample(scrabble$piece, size = 7, replace = FALSE)
sum(tiles %in% vowels) # same methodology as before
})
sd(number_vowels) # standard deviation
simulated_pmf_results <- proportions(table(number_vowels))
plot(simulated_pmf_results, type = "h", col = "darkblue", xlim = c(-0.5, 8), ylim = c(0, 0.35),
ylab = "Probability",
xlab = "Number of Vowels Drawn",
main = "Results of Simulated PMF of the Number of Vowels Drawn in 7 Tiles of Scrabble")
points(0:7, simulated_pmf_results, col = "darkblue", pch = 16)
# pmf of hypergeometric, nudging the x-values
lines(0:7 + 0.1, dhyper(0:7, m = m, n = n, k = k),
col = "red3", lwd = 2, type = "h")
points(0:7 + 0.1, dhyper(0:7, m = m, n = n, k = k), col = "red3", pch = 16)
# add text labels
text(x = 0:7-0.2, y = simulated_pmf_results + 0.04, labels = simulated_pmf_results, col = "darkblue")
text(x = 0:7+0.2, y = simulated_pmf_results + 0.02,
labels = round(dhyper(0:7, m = m, n = n, k = k), 4),
col = "red3")
# create a legend
legend("topright", legend = c("Simulation", "Hypergeometric pmf"),
col = c("darkblue", "red3"), lwd = 2, pch = 16)
rolls <- replicate(1e4, {
die <- 1000; roll <- 0
# rule for deathroll: keep rolling until you get a 1, then if you get a 1, you lose
while(die > 1){
roll <- roll + 1
die <- sample(1:die, size = 1)
}
roll
})
mean(rolls)
pmf_estimation_rolls <- proportions(table(rolls))
pmf_estimation_rolls
plot(pmf_estimation_rolls, type = "h", xlab = "Number of Rolls", ylab = "Probability of Deathrolling", main = "Simulated PMF of the Total Number of Rolls")'")
plot(pmf_estimation_rolls, type = "h", xlab = "Number of Rolls", ylab = "Probability of Deathrolling", main = "Simulated PMF of the Total Number of Rolls")
mean((rolls %% 2) == 0) # the prob that 1 came up on an even roll, leading to a death roll and a win for player 1
mean((rolls %% 2) == 0) # the prob that 1 came up on an even roll, leading to a death roll and a win for player 1
mean((rolls %% 2) == 0) # the prob that 1 came up on an even roll, leading to a death roll and a win for player 1
knitr::opts_chunk$set(echo = TRUE)
# load R packages used here
library(fosdata)
1/4 + 1/2 + 1/8 + 1/8
1/8 + 1/8
((1/8) + (1/8)) / ((1/8) + (1/8) + (1/2))
1/8 + 1/8 + 1/2
# the mean of x is solved using the pmf and the x values
# the probs
probs <- c(1/4, 1/2, 1/8, 1/8)
# the x vals
x <- 0:3
# solve for mean
mean_x <- sum (x*probs)
mean_x
# variance of x is going to be the second moment - mean squared
second_moment_x <- sum((x^2)*probs)
# variance
var_x <- second_moment_x - mean_x^2
var_x
# the expected number of ender pearls is the mean of the binomial distribution, therefore np
n <- 262
p <- 0.047
n*p
# we can calculate the probability binomial to solve for $(P(X \geq 42)$
n <- 262
p <- 0.047
pbinom(41, size = n, prob = p, lower.tail = FALSE)
# again we can solve for the expected number of blaze rods by solving for np
n <- 305
p <- 0.5
n*p
# we can calculate the probability binomial to solve for $(P(X \geq 211)$
# again, using probability binom exceeding 211
pbinom(210, size = n, prob = p, lower.tail = FALSE)
num_same_name <- replicate(1e4, {
names <- 1:27
draws <- sample(names)
sum(names == draws) # did they draw their name ?
})
# expected value of num_same_name
mean(num_same_name)
pmf_num_same_name <- proportions(table(num_same_name))
plot(pmf_num_same_name, type = "h",
xlab = "Number of People",
ylab = "Probability",
main = "PMF of the Number of People Who Draw Their Own Name")
# poisson approximation
dpois(x = 0:8, lambda = 1) |> round(4) # poisson approximation rounded to 4 decimal places
plot(dpois(x = 0:8, lambda = 1), type = "h",
xlab = "Number of People",
ylab = "Probability",
main = "The Poisson Approximation of the Number of People Who Draw Their Own Name")
# pmf values from above
pmf_num_same_name
# poisson approximation from above
dpois(x = 0:8, lambda = 1) |> round(4)
# comparison as a plot
plot(pmf_num_same_name, type = "b", col = "salmon",
xlab = "Number of People Who Draw Their Own Name",
ylab = "Probability of Drawing Their Own Name",
main = "Simulation in Comparison to Poisson Approximation of Number of People Who Draw Their Own Name")
lines(x = 0:8, y = dpois(x = 0:8, lambda = 1),
type = "b", col = "black", lwd = 2)
legend("topright", legend = c("Simulation", "poisson approximation"),
col = c("salmon", "black"), lwd = 2, lty = 1, pch = 1)
# create vowels vector
vowels <- c("A", "E", "I", "O", "U")
# run simulation, check if the tiles pulled are in vowels vector using the %in% operator
num_vowels <- replicate(1e4, {
tiles <- sample(scrabble$piece, size = 7, replace = FALSE)
sum(tiles %in% vowels) # %in% operator simply checks if tiles sample are in vowels
})
mean(num_vowels == 0) # probability of no vowels
dhyper(x = 7, m = 42, n = 58, k = 7)
phyper(q = 2, m = 42, n = 58, k = 7)
k <- 7
n <- 58
m <- 42
k * m / (m + n)
# the formula for this is = $\sqrt(k * m / (m + n) * n / (m + n) * (m + n - k)/(m + n - 1))$
sqrt(k * m / (m + n) * n / (m + n) * (m + n - k)/(m + n - 1))
number_vowels <- replicate(1e4, {
tiles <- sample(scrabble$piece, size = 7, replace = FALSE)
sum(tiles %in% vowels) # same methodology as before
})
sd(number_vowels) # standard deviation
simulated_pmf_results <- proportions(table(number_vowels))
plot(simulated_pmf_results, type = "h", col = "darkblue", xlim = c(-0.5, 8), ylim = c(0, 0.35),
ylab = "Probability",
xlab = "Number of Vowels Drawn",
main = "Results of Simulated PMF of the Number of Vowels Drawn in 7 Tiles of Scrabble")
points(0:7, simulated_pmf_results, col = "darkblue", pch = 16)
# pmf of hypergeometric, nudging the x-values
lines(0:7 + 0.1, dhyper(0:7, m = m, n = n, k = k),
col = "red3", lwd = 2, type = "h")
points(0:7 + 0.1, dhyper(0:7, m = m, n = n, k = k), col = "red3", pch = 16)
# add text labels
text(x = 0:7-0.2, y = simulated_pmf_results + 0.04, labels = simulated_pmf_results, col = "darkblue")
text(x = 0:7+0.2, y = simulated_pmf_results + 0.02,
labels = round(dhyper(0:7, m = m, n = n, k = k), 4),
col = "red3")
# create a legend
legend("topright", legend = c("Simulation", "Hypergeometric pmf"),
col = c("darkblue", "red3"), lwd = 2, pch = 16)
rolls <- replicate(1e4, {
die <- 1000; roll <- 0
# rule for deathroll: keep rolling until you get a 1, then if you get a 1, you lose
while(die > 1){
roll <- roll + 1
die <- sample(1:die, size = 1)
}
roll
})
mean(rolls)
pmf_estimation_rolls <- proportions(table(rolls))
pmf_estimation_rolls
plot(pmf_estimation_rolls, type = "h", xlab = "Number of Rolls", ylab = "Probability of Deathrolling", main = "Simulated PMF of the Total Number of Rolls")
mean((rolls %% 2) == 0) # the prob that 1 came up on an even roll, leading to a death roll and a win for player 1
pmf_num_same_name <- proportions(table(num_same_name))
plot(pmf_num_same_name, type = "h",
xlab = "Number of People",
ylab = "Probability",
main = "PMF of the Number of People Who Draw Their Own Name",
color = "salmon")
pmf_num_same_name <- proportions(table(num_same_name))
plot(pmf_num_same_name, type = "h",
xlab = "Number of People",
ylab = "Probability",
main = "PMF of the Number of People Who Draw Their Own Name",
col = "salmon")
plot(dpois(x = 0:8, lambda = 1), type = "h",
xlab = "Number of People",
ylab = "Probability",
main = "The Poisson Approximation of the Number of People Who Draw Their Own Name",
col = "salmon")
# comparison as a plot
plot(pmf_num_same_name, type = "b", col = "purple",
xlab = "Number of People Who Draw Their Own Name",
ylab = "Probability of Drawing Their Own Name",
main = "Simulation in Comparison to Poisson Approximation of Number of People Who Draw Their Own Name")
points(0:7, simulated_pmf_results, col = "purple", pch = 16)
# add text labels
text(x = 0:7-0.2, y = simulated_pmf_results + 0.04, labels = simulated_pmf_results, col = "salmon")
le
points(0:7, simulated_pmf_results, col = "purp", pch = 16)
purple
# the formula for this is = $\sqrt(k * m / (m + n) * n / (m + n) * (m + n - k)/(m + n - 1))$
sqrt(k * m / (m + n) * n / (m + n) * (m + n - k)/(m + n - 1))
number_vowels <- replicate(1e4, {
tiles <- sample(scrabble$piece, size = 7, replace = FALSE)
sum(tiles %in% vowels) # same methodology as before
})
sd(number_vowels) # standard deviation
simulated_pmf_results <- proportions(table(number_vowels))
plot(simulated_pmf_results,
type = "h",
xlim = c(-0.5, 8), ylim = c(0, 0.35),
ylab = "Probability",
xlab = "Number of Vowels Drawn",
main = "Simulated PMF Hypergeometric Distribution: # Vols Drawn",
col = "salmon")
points(0:7, simulated_pmf_results, col = "purple", pch = 16)
# pmf hypogemetric
lines(0:7 + 0.1,
dhyper(0:7, m = m, n = n, k = k),
col = "salmon",
lwd = 2,
type = "h")
# the simulated pmf results
points(0:7 + 0.1,
dhyper(0:7, m = m, n = n, k = k),
col = "salmon",
pch = 16)
# text labelling
text(x = 0:7-0.2,
y = simulated_pmf_results + 0.04,
labels = simulated_pmf_results,
col = "salmon")
text(x = 0:7+0.2,
y = simulated_pmf_results + 0.02,
labels = round(dhyper(0:7, m = m, n = n, k = k), 4),
col = "salmon")
# legend
legend("topright",
legend = c("Simulation", "Hypergeometric pmf"),
col = c("salmon", "purple"),
lwd = 2,
pch = 16)
plot(pmf_estimation_rolls,
type = "h",
xlab = "Number of Rolls",
ylab = "Probability of Deathrolling",
main = "Simulated PMF of the Total Number of Rolls",
col = "salmon")
knitr::opts_chunk$set(echo = TRUE)
# load R packages used here
library(fosdata)
1/4 + 1/2 + 1/8 + 1/8
1/8 + 1/8
((1/8) + (1/8)) / ((1/8) + (1/8) + (1/2))
1/8 + 1/8 + 1/2
# the mean of x is solved using the pmf and the x values
# the probs
probs <- c(1/4, 1/2, 1/8, 1/8)
# the x vals
x <- 0:3
# solve for mean
mean_x <- sum (x*probs)
mean_x
# variance of x is going to be the second moment - mean squared
second_moment_x <- sum((x^2)*probs)
# variance
var_x <- second_moment_x - mean_x^2
var_x
# the expected number of ender pearls is the mean of the binomial distribution, therefore np
n <- 262
p <- 0.047
n*p
# we can calculate the probability binomial to solve for $(P(X \geq 42)$
n <- 262
p <- 0.047
pbinom(41, size = n, prob = p, lower.tail = FALSE)
# again we can solve for the expected number of blaze rods by solving for np
n <- 305
p <- 0.5
n*p
# we can calculate the probability binomial to solve for $(P(X \geq 211)$
# again, using probability binom exceeding 211
pbinom(210, size = n, prob = p, lower.tail = FALSE)
num_same_name <- replicate(1e4, {
names <- 1:27
draws <- sample(names)
sum(names == draws) # did they draw their name ?
})
# expected value of num_same_name
mean(num_same_name)
pmf_num_same_name <- proportions(table(num_same_name))
plot(pmf_num_same_name, type = "h",
xlab = "Number of People",
ylab = "Probability",
main = "PMF of the Number of People Who Draw Their Own Name",
col = "salmon")
# poisson approximation
dpois(x = 0:8, lambda = 1) |> round(4) # poisson approximation rounded to 4 decimal places
plot(dpois(x = 0:8, lambda = 1), type = "h",
xlab = "Number of People",
ylab = "Probability",
main = "The Poisson Approximation of the Number of People Who Draw Their Own Name",
col = "salmon")
# pmf values from above
pmf_num_same_name
# poisson approximation from above
dpois(x = 0:8, lambda = 1) |> round(4)
# comparison as a plot
plot(pmf_num_same_name, type = "b", col = "purple",
xlab = "Number of People Who Draw Their Own Name",
ylab = "Probability of Drawing Their Own Name",
main = "Simulation in Comparison to Poisson Approximation of Number of People Who Draw Their Own Name")
lines(x = 0:8, y = dpois(x = 0:8, lambda = 1),
type = "b", col = "purple", lwd = 2)
legend("topright", legend = c("Simulation", "poisson approximation"),
col = c("salmon", "purple"), lwd = 2, lty = 1, pch = 1)
# create vowels vector
vowels <- c("A", "E", "I", "O", "U")
# run simulation, check if the tiles pulled are in vowels vector using the %in% operator
num_vowels <- replicate(1e4, {
tiles <- sample(scrabble$piece, size = 7, replace = FALSE)
sum(tiles %in% vowels) # %in% operator simply checks if tiles sample are in vowels
})
mean(num_vowels == 0) # probability of no vowels
dhyper(x = 7, m = 42, n = 58, k = 7)
phyper(q = 2, m = 42, n = 58, k = 7)
k <- 7
n <- 58
m <- 42
k * m / (m + n)
# the formula for this is = $\sqrt(k * m / (m + n) * n / (m + n) * (m + n - k)/(m + n - 1))$
sqrt(k * m / (m + n) * n / (m + n) * (m + n - k)/(m + n - 1))
number_vowels <- replicate(1e4, {
tiles <- sample(scrabble$piece, size = 7, replace = FALSE)
sum(tiles %in% vowels) # same methodology as before
})
sd(number_vowels) # standard deviation
simulated_pmf_results <- proportions(table(number_vowels))
plot(simulated_pmf_results,
type = "h",
xlim = c(-0.5, 8), ylim = c(0, 0.35),
ylab = "Probability",
xlab = "Number of Vowels Drawn",
main = "Simulated PMF Hypergeometric Distribution: # Vols Drawn",
col = "salmon")
points(0:7, simulated_pmf_results, col = "purple", pch = 16)
# pmf hypogemetric
lines(0:7 + 0.1,
dhyper(0:7, m = m, n = n, k = k),
col = "salmon",
lwd = 2,
type = "h")
# the simulated pmf results
points(0:7 + 0.1,
dhyper(0:7, m = m, n = n, k = k),
col = "salmon",
pch = 16)
# text labelling
text(x = 0:7-0.2,
y = simulated_pmf_results + 0.04,
labels = simulated_pmf_results,
col = "salmon")
text(x = 0:7+0.2,
y = simulated_pmf_results + 0.02,
labels = round(dhyper(0:7, m = m, n = n, k = k), 4),
col = "salmon")
# legend
legend("topright",
legend = c("Simulation", "Hypergeometric pmf"),
col = c("salmon", "purple"),
lwd = 2,
pch = 16)
rolls <- replicate(1e4, {
die <- 1000; roll <- 0
# rule for deathroll: keep rolling until you get a 1, then if you get a 1, you lose
while(die > 1){
roll <- roll + 1
die <- sample(1:die, size = 1)
}
roll
})
mean(rolls)
pmf_estimation_rolls <- proportions(table(rolls))
pmf_estimation_rolls
plot(pmf_estimation_rolls,
type = "h",
xlab = "Number of Rolls",
ylab = "Probability of Deathrolling",
main = "Simulated PMF of the Total Number of Rolls",
col = "salmon")
mean((rolls %% 2) == 0) # the prob that 1 came up on an even roll, leading to a death roll and a win for player 1
